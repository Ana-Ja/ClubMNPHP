<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>Document</title>
	<script src="https://code.jquery.com/jquery-1.11.3.min.js"></script>
	 <script type="text/javascript" src="//maps.google.com/maps/api/js?sensor=true"></script>
	 <script type="text/javascript" src="data:application/octet-stream;base64,"></script>
	<script type="text/javascript">
		var map;
		var ruta=[];
		$(document).ready(function() {
		 	document.getElementById("comunidad").addEventListener("change", ObtenerProvincias);
		 	 map = new GMaps({
		 	  div: '#map',
		 	  lat: -12.043333,
		 	  lng: -77.028333
		 	});
		 	//dibujar ruta
		 	//con esto obtengo las coordenadas y coloco el marker
		 	google.maps.event.addListener(map, 'click', function(event) {
		 	 
		 	        var coordenadas = event.latLng;
		 	        var lat = coordenadas.lat();
		 	        var lng = coordenadas.lng();
		 	        console.log("lat"+ lat);
		 	            placeMarker(event.latLng);
		 	 
		 	});
		 	 
		 	 
		 	//y aquí la función que me permite colocar el marcador, los condicionales son
		 	//para que solo un marcador aparezca a la vez, así que si ya existe uno, lo recoloca
		 	//en la nueva posición
		 	 
		 	var marker;
		 	 
		 	function placeMarker(location) {
		 	  if ( marker ) {
		 	    marker.setPosition(location);
		 	  } else {
		 	    marker = new google.maps.Marker({
		 	      position: location,
		 	      map: map
		 	    });
		 	  }
		 	} //fin funcion placeMarker
		});

		 function ObtenerProvincias() {
		 	var comunidad = $("#comunidad").val();
		 	var params = {
				"comunidad": comunidad, 
				"funcion": "obtenerProvincias"
			};
		 	$.ajax({
		 		url: './funciones.php',//direccion donde esta el web service
		 		type: 'POST', //metpdp que se va a utilizar para el envio de datos
		 		//data:'base='+base+'&altura='+altura , //variables que quiero pasar al webservice
		 		//data: 'comunidad='+comunidad , //variables que quiero pasar al webservice
		 		data: params,
		 		//beforeSend: function() {
		 		//	$("esperar".html("Procesando, espere por favor"));
		 		//},
		 		dataType: 'json', //formato de los datos que va a devolver el websrvice
		 		success:function(data, textStatus,jqxhr){
		 			//data:datos que devuelve
		 			//jqxhr: informacion de la peticion
		 			//textStatus:informacion del estado
		 			var texto="";
		 			texto = "Provincias: <select type='text' id='provincia' >";
		 			texto= texto +  "<option value='0'>-------------</option>";
		 			console.log(data);
		 			//alert(JSON.stringify(data)); //convierte el JSON a string que es lo que necesita el alert
		 			//var array = JSON.parse(data);
		 			for (var i in data) {
		 			//for (var i=0; i<data.length;i++){
		 			
		 				
		 				texto= texto + "<option value='" + data[i].id +"' >" +data[i]['provincia'] +"</option>";
		 			}
		 			$('#div_provincias').html(texto);
		 			$('#div_ciudades').css("display", "none");
		 			document.getElementById("provincia").addEventListener("change", ObtenerCiudades);
		 		},
		 		error:function(jqxhr, textStatus, errorMessage){
		 			alert(textStatus+ "" +errorMessage);
		 		}
		 	});
		 }

		
		 	function ObtenerCiudades() {
		 		var provincia = $("#provincia").val();
		 		var params = {
				"provincia": provincia, 
				"funcion": "obtenerCiudades"
				};
		 		$.ajax({
		 			url: './funciones.php',//direccion donde esta el web service
		 			type: 'POST', //metpdp que se va a utilizar para el envio de datos
		 			//data:'base='+base+'&altura='+altura , //variables que quiero pasar al webservice
		 			//data: 'provincia='+provincia , //variables que quiero pasar al webservice
		 			data: params,
		 			beforeSend: function() {
		 				$("esperando").html("Procesando, espere por favor");
		 				//$("esperando").spin({radius:3,width:2, height:2, length:4});
		 			},
		 			dataType: 'json', //formato de los datos que va a devolver el websrvice
		 			success:function(data, textStatus,jqxhr){
		 				console.log("AAAA");
		 				var texto="";
			 			texto = "Ciudades: <select type='text' id='ciudad' >";
			 			texto= texto +  "<option value='0'>-------------</option>";
			 			console.log("Ciudades" +data);
			 			for (var i in data) {

			 				texto= texto + "<option value='" + data[i].id +"' >" +data[i]['municipio'] +"</option>";
			 			}
			 			console.log("TExto" +texto);
		 				$('#div_ciudades').html(texto);
		 				$('#div_ciudades').css("display", "block");
		 				document.getElementById("ciudad").addEventListener("change", municipioSeleccionado);
		 			},
		 			error:function(jqxhr, estado, errorMessage){
		 				alert(textStatus+ "" +errorMessage);
		 				console.log(estado);
		 				console.log(errorMessage);
		 			},
		 			//este codigo 'complete' se ejecuta despues del success
		 			//o despues del error
		 			complete: function(jqxhr, estado) {
		 				//el estado puede ser: success, notmodified,
		 				//timeout, error, abort, parseerror
		 				console.log(estado);
		 			},
		 			//la peticion espera la respuesta cada x milisegungos
		 			//si pasa ese tiempo saldra por error
		 			 timeout:10000
		 		});
		
				
		 }
		 function municipioSeleccionado(){
		 	var idMunicipio = $("#ciudad").val();

		 	var parametros = {
		 			"funcion":"obtenerMunicipio",
		 			"idMunicipio":idMunicipio
		 		}
		 	$.ajax({
		 		url: './funciones.php', //dirección donde se encuentra el webservice
		 		type: 'POST', //método que se va a utilizar para el envío de los datos
		 		data: parametros, //variables que quiero pasar al webservice
		 		dataType: 'json', //formato de los datos que va a devolver el webservice
		 		success: function(data, textStatus, jqxhr){
		 			//map.setCenter(data['latitud'],data['longitud']);
		 			var latlng = new google.maps.LatLng(data['latitud'],data['longitud']);
		 			map.panTo(latlng);
		 			map.setZoom(9);
		 			map.addMarker({
		 			  lat: data['latitud'],
		 			  lng: data['longitud'],
		 			  title: data['municipio'],
		 			  click: function(e) {
		 			    alert('Estás visitando '+ data['municipio']);
		 			  }
		 			});
		 			
		 			// map.addControl({
		 			//   position: 'top_right',
		 			//   content: 'Geolocate',
		 			//   style: {
		 			//     margin: '5px',
		 			//     padding: '1px 6px',
		 			//     border: 'solid 1px #717B87',
		 			//     background: '#fff'
		 			//   },
		 			//   events: {
		 			//     click: function(){
		 			//       console.log(this);
		 			//     }
		 			//   }
		 			// });
		 		},
		 		error: function (jqxhr, textStatus, errorMessage){
		 			alert(textStatus+" "+errorMessage);
		 		}
		 	});
		 } 


	</script>	 
</head>
<body>
	<form id ="form_id">
		Comunidades: <select type="text" id="comunidad" >
	<?php
		include_once './conexion.php';
		include './funciones.php';
		
		//hago la consulta
		$consulta = "select * from comunidades";
		$conexion = conectar();
		$resultado= $conexion->query($consulta);
		
		echo "<option value='0'>--------</option>";
			while ($fila = $resultado->fetch_assoc()) {
				
				echo "<option value='".$fila['id']."' >".utf8_encode($fila['comunidad'])."</option>";
			}
		 
		
	?>
	
	</select>
	<div id='div_provincias'></div>
	<div id='div_ciudades'></div>
	<div id='esperando'></div>
	
	</form>
	<div id='map' style="height:400px;width:700px;margin-top:40px"></div>
</body>
</html>